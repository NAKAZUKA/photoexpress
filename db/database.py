from datetime import timedelta
from sqlalchemy import (
    create_engine, Column, Integer, String, Boolean,
    Text, ForeignKey, DateTime, JSON, DECIMAL
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime

engine = create_engine("sqlite:///db/photoexpress.sqlite", echo=False)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()


class User(Base):
    __tablename__ = "users"

    id               = Column(Integer, primary_key=True, index=True)
    telegram_id      = Column(Integer, unique=True, nullable=False)
    username         = Column(String)
    phone_number     = Column(String)
    full_name        = Column(String)
    accepted_policy  = Column(Boolean, default=False)
    # –ù–æ–≤–æ–µ –ø–æ–ª–µ: —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    first_order_paid = Column(Boolean, default=False)

    created_at       = Column(DateTime, default=datetime.utcnow)


class OrderStatus(Base):
    __tablename__ = "order_statuses"

    code       = Column(String, primary_key=True)
    label      = Column(String)
    sort_order = Column(Integer)


class Order(Base):
    __tablename__ = "orders"

    order_id       = Column(String, primary_key=True, index=True)
    user_id        = Column(Integer, ForeignKey("users.id"))
    photos         = Column(JSON)
    delivery_point = Column(String)
    receiver_name  = Column(String)
    receiver_phone = Column(String)
    comment        = Column(Text)
    status         = Column(String, ForeignKey("order_statuses.code"), default="new")
    price          = Column(DECIMAL)
    discount       = Column(DECIMAL, default=0.0)
    paid           = Column(Boolean, default=False)
    created_at     = Column(DateTime, default=datetime.utcnow)


class PickupPoint(Base):
    __tablename__ = "pickup_points"

    id       = Column(Integer, primary_key=True, index=True)
    name     = Column(String, nullable=False)
    address  = Column(String)
    lat      = Column(DECIMAL)
    lon      = Column(DECIMAL)
    rating   = Column(DECIMAL)


# –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö
class PromoCode(Base):
    __tablename__ = "promo_codes"

    id               = Column(Integer, primary_key=True, index=True)
    code             = Column(String, unique=True, nullable=False)      # —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
    discount_percent = Column(Integer, nullable=False)                  # –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10, 20, 30 –∏ —Ç.–¥.)
    expires_at       = Column(DateTime, nullable=False)                 # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    uses_left        = Column(Integer, nullable=True)                   # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –µ—â—ë –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (None = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)


def init_db():
    Base.metadata.create_all(bind=engine)

    db = SessionLocal()
    # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
    if not db.query(OrderStatus).first():
        default_statuses = [
            OrderStatus(code="new",        label="üîÑ –ù–æ–≤—ã–π",       sort_order=1),
            OrderStatus(code="in_progress",label="üõ† –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", sort_order=2),
            OrderStatus(code="completed",  label="‚úÖ –ì–æ—Ç–æ–≤",       sort_order=3),
            OrderStatus(code="cancelled",  label="‚ùå –û—Ç–º–µ–Ω—ë–Ω",     sort_order=4),
        ]
        db.add_all(default_statuses)

    # –ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ (–ú–æ—Å–∫–≤–∞)
    if not db.query(PickupPoint).first():
        default_points = [
            PickupPoint(name="–ü–í–ó –¢–≤–µ—Ä—Å–∫–∞—è",          address="–¢–≤–µ—Ä—Å–∫–∞—è, 10",      lat=55.765, lon=37.610, rating=4.5),
            PickupPoint(name="–ü–í–ó –ê—Ä–±–∞—Ç",             address="–ê—Ä–±–∞—Ç, 25",         lat=55.752, lon=37.592, rating=4.2),
            PickupPoint(name="–ü–í–ó –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±.",   address="–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±., 8",lat=55.752, lon=37.590, rating=4.7),
            PickupPoint(name="–ü–í–ó –ö—É—Ç—É–∑–æ–≤—Å–∫–∞—è",        address="–ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä., 30",lat=55.743, lon=37.553, rating=4.3),
            PickupPoint(name="–ü–í–ó –ò–∑–º–∞–π–ª–æ–≤–æ",          address="–ò–∑–º–∞–π–ª–æ–≤—Å–∫–æ–µ —à., 71",lat=55.796, lon=37.762, rating=4.6),
        ]
        db.add_all(default_points)

    if not db.query(PromoCode).first():
        now = datetime.utcnow()
        test_coupons = [
            PromoCode(
                code="TEST10",
                discount_percent=10,
                expires_at=now + timedelta(days=7),
                uses_left=5
            ),
            PromoCode(
                code="WELCOME20",
                discount_percent=20,
                expires_at=now + timedelta(days=7),
                uses_left=5
            ),
            PromoCode(
                code="DISCOUNT30",
                discount_percent=30,
                expires_at=now + timedelta(days=7),
                uses_left=5
            ),
        ]
        db.add_all(test_coupons)

    db.commit()
    db.close()
