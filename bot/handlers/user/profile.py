from aiogram import Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db.database import SessionLocal, User
from bot.keyboards.common import main_menu_keyboard

class ProfileEdit(StatesGroup):
    waiting_for_new_fullname = State()
    waiting_for_new_phone = State()

def register_profile_handlers(dp: Dispatcher):

    @dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    async def profile_main(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        db.close()

        if not user:
            await message.answer("üôÅ –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
            return

        text = (
            f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"üë§ –§–ò–û: {user.full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:"
        )

        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")],
                [KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
                [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            is_persistent=True
        )

        await message.answer(text, reply_markup=kb, parse_mode="HTML")

    @dp.message(F.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
    async def change_fullname(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–§–ò–û</b>:", reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
        await state.set_state(ProfileEdit.waiting_for_new_fullname)

    @dp.message(ProfileEdit.waiting_for_new_fullname)
    async def save_fullname(message: Message, state: FSMContext):
        full_name = message.text.strip()
        if len(full_name.split()) < 2 or any(len(w) < 2 for w in full_name.split()):
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")
            return

        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        if user:
            user.full_name = full_name
            db.commit()
        db.close()
        await message.answer("‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        await state.clear()

    @dp.message(F.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    async def change_phone(message: Message, state: FSMContext):
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                [KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
            ],
            resize_keyboard=True,
            is_persistent=True
        )
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
        await state.set_state(ProfileEdit.waiting_for_new_phone)

    @dp.message(ProfileEdit.waiting_for_new_phone, F.contact)
    async def phone_from_contact(message: Message, state: FSMContext):
        await save_phone(message, state, message.contact.phone_number)

    @dp.message(ProfileEdit.waiting_for_new_phone, F.text)
    async def phone_from_text(message: Message, state: FSMContext):
        text = message.text.strip()
        if text.startswith("+7") or text.startswith("8"):
            await save_phone(message, state, text)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å +7")

    async def save_phone(message: Message, state: FSMContext, phone: str):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        if user:
            user.phone_number = phone
            db.commit()
        db.close()
        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu_keyboard())
        await state.clear()

    @dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    async def delete_account(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        if user:
            db.delete(user)
            db.commit()
            await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        await state.clear()

    @dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    async def back_to_menu(message: Message, state: FSMContext):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
