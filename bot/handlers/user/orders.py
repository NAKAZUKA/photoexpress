import os
import shutil
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import desc
from sqlalchemy.orm.attributes import flag_modified
from db.database import SessionLocal, Order, User, OrderStatus, PickupPoint

FORMATS = ["10x15", "13x18", "15x21", "21x30 (A4)", "30x40", "30x45"]

class OrdersFSM(StatesGroup):
    choosing_status = State()
    browsing_orders = State()
    editing_order_id = State()
    editing_field_choice = State()
    editing_value_input = State()
    confirming_cancel = State()
    editing_pickup = State()

def get_status_code(db, label_substring: str) -> str:
    status = db.query(OrderStatus).filter(OrderStatus.label.contains(label_substring)).first()
    return status.code if status else "new"

async def _send_orders_list(message: Message, orders: list[Order], status_label: str, page: int):
    text = f"<b>üì¶ –ó–∞–∫–∞–∑—ã ‚Äî {status_label}</b>\n\n"
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for o in orders:
        photo_lines = [
            f"‚Ä¢ {p['filename']} ‚Äî {p['format']}, {p['copies']} –∫–æ–ø."
            for p in o.photos
        ]
        price_str = f"{float(o.price):.2f}".rstrip("0").rstrip(".")
        payment_str = "‚ùó –ù–µ –æ–ø–ª–∞—á–µ–Ω" if not o.paid else "‚úÖ –û–ø–ª–∞—á–µ–Ω"
        text += (
            f"üÜî <code>{o.order_id[:8]}</code>  üìÖ {o.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üñº –§–æ—Ç–æ: {len(o.photos)} —à—Ç.\n"
            + "\n".join(photo_lines) + "\n"
            f"üí∞ {price_str} ‚ÇΩ ‚Äî {payment_str}\n"
            f"üìç {o.delivery_point or '–ü—É–Ω–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {o.receiver_name or '‚Äî'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {o.receiver_phone or '‚Äî'}\n"
            f"üí¨ {o.comment or '‚Äî'}\n\n"
        )
        # –ò–∑–º–µ–Ω–∏—Ç—å / –û—Ç–º–µ–Ω–∏—Ç—å
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{o.order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel:{o.order_id}")
        ])
        # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
        if not o.paid:
            kb.inline_keyboard.append([
                InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay:{o.order_id}")
            ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="page:prev"),
        InlineKeyboardButton(text="‚û° –î–∞–ª–µ–µ", callback_data="page:next")
    ])
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back:status")
    ])

    await message.edit_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

def register_orders_handlers(dp: Dispatcher):
    @dp.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    async def choose_status(message: Message, state: FSMContext):
        db = SessionLocal()
        statuses = db.query(OrderStatus).order_by(OrderStatus.sort_order).all()
        db.close()
        kb_rows = [[InlineKeyboardButton(text=s.label, callback_data=f"status:{s.code}")] for s in statuses]
        await message.answer(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
        )
        await state.set_state(OrdersFSM.choosing_status)

    @dp.callback_query(F.data.startswith("status:"), OrdersFSM.choosing_status)
    async def show_orders_by_status(callback_query: CallbackQuery, state: FSMContext):
        status_code = callback_query.data.split(":", 1)[1]
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        status = db.query(OrderStatus).filter_by(code=status_code).first()
        orders = (
            db.query(Order)
            .filter_by(user_id=user.id, status=status_code)
            .order_by(desc(Order.created_at))
            .limit(3)
            .all()
        )
        db.close()

        if not orders:
            await callback_query.message.edit_text("‚ùó –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await state.clear()
            return

        await state.update_data(status_filter=status_code, page=0)
        await _send_orders_list(callback_query.message, orders, status.label, 0)
        await state.set_state(OrdersFSM.browsing_orders)

    @dp.callback_query(F.data.startswith("pay:"), OrdersFSM.browsing_orders)
    async def pay_order(callback_query: CallbackQuery, state: FSMContext):
        order_id = callback_query.data.split(":",1)[1]
        db = SessionLocal()
        order = db.query(Order).filter_by(order_id=order_id).first()
        if order and not order.paid:
            order.paid = True
            db.commit()
            await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω.", show_alert=True)
        else:
            await callback_query.answer("‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        data = await state.get_data()
        status_code = data.get("status_filter")
        page = data.get("page", 0)
        user = db.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        orders = (
            db.query(Order)
            .filter_by(user_id=user.id, status=status_code)
            .order_by(desc(Order.created_at))
            .offset(page * 1)
            .limit(1)
            .all()
        )
        status_label = db.query(OrderStatus).filter_by(code=status_code).first().label
        db.close()
        await _send_orders_list(callback_query.message, orders, status_label, page)

    @dp.callback_query(F.data == "back:status")
    async def back_to_status(callback_query: CallbackQuery, state: FSMContext):
        db = SessionLocal()
        statuses = db.query(OrderStatus).order_by(OrderStatus.sort_order).all()
        db.close()
        kb_rows = [[InlineKeyboardButton(text=s.label, callback_data=f"status:{s.code}")] for s in statuses]
        await callback_query.message.edit_text(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
        )
        await state.set_state(OrdersFSM.choosing_status)
        await callback_query.answer()

    @dp.callback_query(F.data.startswith("page:"), OrdersFSM.browsing_orders)
    async def paginate_orders(callback_query: CallbackQuery, state: FSMContext):
        direction = callback_query.data.split(":",1)[1]
        data = await state.get_data()
        status_code = data.get("status_filter")
        page = data.get("page",0)
        new_page = max(page-1,0) if direction=="prev" else page+1

        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        status = db.query(OrderStatus).filter_by(code=status_code).first()
        orders = (
            db.query(Order)
            .filter_by(user_id=user.id, status=status_code)
            .order_by(desc(Order.created_at))
            .offset(new_page*1)
            .limit(1)
            .all()
        )
        db.close()
        if not orders:
            await callback_query.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
            return
        await state.update_data(page=new_page)
        await _send_orders_list(callback_query.message, orders, status.label, new_page)
        await callback_query.answer()

    @dp.callback_query(F.data.startswith("cancel:"), OrdersFSM.browsing_orders)
    async def cancel_order_callback(callback_query: CallbackQuery, state: FSMContext):
        order_id = callback_query.data.split(":",1)[1]
        db = SessionLocal()
        order = db.query(Order).filter_by(order_id=order_id).first()
        user = db.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        if order:
            folder = f"uploads/{user.telegram_id}/{order.order_id}"
            if os.path.exists(folder): shutil.rmtree(folder)
            db.delete(order)
            db.commit()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            data = await state.get_data()
            status_code = data.get("status_filter")
            page = data.get("page",0)
            status = db.query(OrderStatus).filter_by(code=status_code).first()
            orders = (
                db.query(Order)
                .filter_by(user_id=user.id, status=status_code)
                .order_by(desc(Order.created_at))
                .offset(page*1)
                .limit(1)
                .all()
            )
            db.close()
            await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
            if orders:
                await _send_orders_list(callback_query.message, orders, status.label, page)
            else:
                db2 = SessionLocal()
                statuses = db2.query(OrderStatus).order_by(OrderStatus.sort_order).all()
                db2.close()
                kb_rows = [[InlineKeyboardButton(text=s.label, callback_data=f"status:{s.code}")] for s in statuses]
                await callback_query.message.edit_text(
                    "‚ùó –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
                )
                await state.set_state(OrdersFSM.choosing_status)
        else:
            db.close()
            await callback_query.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

            return

        await state.update_data(editing_order_id=order_id)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data="editfield:receiver_phone")],
            [InlineKeyboardButton(text="üë§ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è",    callback_data="editfield:receiver_name")]
        ])
        if order.status == 'new':
            kb.inline_keyboard += [
                [InlineKeyboardButton(text="üñº –§–æ—Ä–º–∞—Ç",         callback_data="editfield:format")],
                [InlineKeyboardButton(text="üî¢ –ö–æ–ª-–≤–æ –∫–æ–ø–∏–π",   callback_data="editfield:copies")],
                [InlineKeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –ü–í–ó",   callback_data=f"editpp:{order_id}")]
            ]
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="back:status"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="back:status")
        ])
        await callback_query.message.answer(
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id[:8]}?",
            reply_markup=kb
        )
        await state.set_state(OrdersFSM.editing_field_choice)

    @dp.callback_query(F.data.startswith("editfield:"), OrdersFSM.editing_field_choice)
    async def ask_new_value(callback_query: CallbackQuery, state: FSMContext):
        field = callback_query.data.split(":", 1)[1]
        await state.update_data(editing_field=field)
        if field == 'format':
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=fmt, callback_data=f"setformat:{fmt}")] for fmt in FORMATS
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)
        else:
            prompts = {
                'receiver_phone': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:',
                'receiver_name':  '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:',
                'copies':         '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π:'
            }
            await callback_query.message.answer(prompts[field])
            await state.set_state(OrdersFSM.editing_value_input)

    @dp.callback_query(F.data.startswith("setformat:"), OrdersFSM.editing_field_choice)
    async def set_format_from_button(callback_query: CallbackQuery, state: FSMContext):
        fmt = callback_query.data.split(":", 1)[1]
        await state.update_data(editing_field='format', editing_value=fmt)
        await _apply_edit_common(callback_query.message, state)

    @dp.message(OrdersFSM.editing_value_input)
    async def apply_edit_text(message: Message, state: FSMContext):
        await state.update_data(editing_value=message.text.strip())
        await _apply_edit_common(message, state)

    async def _apply_edit_common(source_msg: Message, state: FSMContext):
        data = await state.get_data()
        order_id = data['editing_order_id']
        field    = data['editing_field']
        new_value= data['editing_value']

        db = SessionLocal()
        order = db.query(Order).filter_by(order_id=order_id).first()
        if not order:
            await source_msg.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            db.close()
            await state.clear()
            return

        if field == 'receiver_phone':
            order.receiver_phone = new_value
        elif field == 'receiver_name':
            order.receiver_name = new_value
        elif field == 'format' and order.status == 'new':
            for photo in order.photos:
                photo['format'] = new_value
            flag_modified(order, 'photos')
        elif field == 'copies' and order.status == 'new':
            try:
                cnt = int(new_value)
                for photo in order.photos:
                    photo['copies'] = cnt
                flag_modified(order, 'photos')
            except ValueError:
                await source_msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                db.close()
                return

        db.commit()
        updated = db.query(Order).filter_by(order_id=order_id).first()
        db.close()

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        photo_lines = [
            f"‚Ä¢ {p['filename']} ‚Äî {p['format']}, {p['copies']} –∫–æ–ø."
            for p in updated.photos
        ]
        res_text = (
            f"<b>‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n"
            + f"üÜî <code>{updated.order_id[:8]}</code>  üìÖ {updated.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            + f"üñº –§–æ—Ç–æ: {len(updated.photos)} —à—Ç.\n"
            + "\n".join(photo_lines) + "\n"
            + f"üí∞ {float(updated.price):.2f} ‚ÇΩ\n"
            + f"üìç {updated.delivery_point or '–ü—É–Ω–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
            + f"üë§ {updated.receiver_name or '‚Äî'}\n"
            + f"üìû {updated.receiver_phone or '‚Äî'}\n"
            + f"üí¨ {updated.comment or '‚Äî'}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit:{order_id}")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ",                    callback_data="back:status")]
        ])
        await source_msg.answer(res_text, reply_markup=kb, parse_mode=ParseMode.HTML)
        await state.clear()

    @dp.callback_query(F.data.startswith("editpp:"), OrdersFSM.editing_field_choice)
    async def edit_pickup(callback_query: CallbackQuery, state: FSMContext):
        order_id = callback_query.data.split(":", 1)[1]
        db = SessionLocal()
        points = db.query(PickupPoint).all()
        db.close()
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        for p in points:
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{p.name} ‚Äî {p.address}",
                    callback_data=f"setpp:{order_id}:{p.id}"
                )
            ])
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ü–í–ó:", reply_markup=kb)
        await state.update_data(editing_order_id=order_id)
        await state.set_state(OrdersFSM.editing_pickup)
        await callback_query.answer()

    @dp.callback_query(F.data.startswith("setpp:"), OrdersFSM.editing_pickup)
    async def set_pickup(callback_query: CallbackQuery, state: FSMContext):
        _, order_id, pp_id = callback_query.data.split(":")
        pp_id = int(pp_id)
        db = SessionLocal()
        pickup = db.query(PickupPoint).filter_by(id=pp_id).first()
        order = db.query(Order).filter_by(order_id=order_id).first()

        if order and order.status == get_status_code(db, "–ù–æ–≤—ã–π"):
            order.delivery_point = pickup.name
            db.commit()
            # –ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É _apply_edit_common –¥–ª—è –ü–í–ó
            updated = order
            photo_lines = [
                f"‚Ä¢ {p['filename']} ‚Äî {p['format']}, {p['copies']} –∫–æ–ø."
                for p in updated.photos
            ]
            res_text = (
                f"<b>‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n"
                + f"üÜî <code>{updated.order_id[:8]}</code>  üìÖ {updated.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                + f"üñº –§–æ—Ç–æ: {len(updated.photos)} —à—Ç.\n"
                + "\n".join(photo_lines) + "\n"
                + f"üí∞ {float(updated.price):.2f} ‚ÇΩ\n"
                + f"üìç {updated.delivery_point}\n"
                + f"üë§ {updated.receiver_name or '‚Äî'}\n"
                + f"üìû {updated.receiver_phone or '‚Äî'}\n"
                + f"üí¨ {updated.comment or '‚Äî'}"
            )
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit:{order_id}")],
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ",                    callback_data="back:status")]
            ])
            await callback_query.message.answer(res_text, reply_markup=kb, parse_mode=ParseMode.HTML)
        else:
            await callback_query.message.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ü–í–ó –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.")

        db.close()
        await state.clear()
