# bot/handlers/user/upload.py

import uuid
import shutil
import os
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.types import (
    Message,
    Document,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import desc

from db.database import SessionLocal, Order, User, OrderStatus, PickupPoint
from bot.services.storage import save_photo_to_order_folder
from bot.services.pricing import calculate_order_price, PromoError
from bot.services.maps import get_nearest_pickup_points
from bot.keyboards.common import main_menu_keyboard

# Supported print formats
FORMATS = ["10x15", "13x18", "15x21", "21x30 (A4)", "30x40", "30x45"]


class UploadFSM(StatesGroup):
    waiting_for_photo        = State()
    waiting_for_format       = State()
    waiting_for_copies       = State()
    waiting_for_comment      = State()
    waiting_for_promocode    = State()    # –ù–û–í–´–ô –°–¢–ê–¢–£–° –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    choosing_pickup_point    = State()


def get_status_code(db, label_substring: str) -> str:
    status = (
        db.query(OrderStatus)
          .filter(OrderStatus.label.contains(label_substring))
          .first()
    )
    return status.code if status else "new"


def register_upload_handlers(dp: Dispatcher):
    # 1) –°—Ç–∞—Ä—Ç: ‚ÄúüìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ‚Äù
    @dp.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
    async def start_upload(message: Message, state: FSMContext):
        order_id = str(uuid.uuid4())
        await state.update_data(order_id=order_id, photos=[])
        await message.answer(
            "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ <b>—Ñ–∞–π–ª–æ–º</b> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.set_state(UploadFSM.waiting_for_photo)

    # 2) –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª)
    @dp.message(UploadFSM.waiting_for_photo, F.document)
    async def receive_photo(message: Message, state: FSMContext):
        doc: Document = message.document
        if not doc.mime_type.startswith("image/"):
            await message.answer(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ <b>—Ñ–∞–π–ª–æ–º</b>.",
                parse_mode="HTML"
            )
            return

        data = await state.get_data()
        file_bytes = await message.bot.download(doc)
        filepath = save_photo_to_order_folder(
            message.from_user.id,
            data["order_id"],
            doc.file_name,
            file_bytes.read(),
        )
        await state.update_data(
            current_file_path=filepath,
            current_filename=doc.file_name
        )

        kb_fmt = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f)] for f in FORMATS],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏:", reply_markup=kb_fmt)
        await state.set_state(UploadFSM.waiting_for_format)

    # 2.1) –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ù–ï document –∏ –ø—Ä–∏ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞–≤–µ–Ω –∫–Ω–æ–ø–∫–∞–º ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ¬ª –∏–ª–∏ ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª,
    #      —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª
    @dp.message(
        UploadFSM.waiting_for_photo,
        F.content_type != "document",
        ~F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"])
    )
    async def ask_photo_as_file(message: Message, state: FSMContext):
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ <b>—Ñ–∞–π–ª–æ–º</b>, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ.",
            parse_mode="HTML"
        )
        # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_photo

    # 3) –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    @dp.message(UploadFSM.waiting_for_format, F.text.in_(FORMATS))
    async def receive_format(message: Message, state: FSMContext):
        await state.update_data(current_format=message.text)
        await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–ø–∏–π –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(UploadFSM.waiting_for_copies)

    # 3.1) –ï—Å–ª–∏ –≤ waiting_for_format –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ FORMATS
    @dp.message(UploadFSM.waiting_for_format)
    async def ask_valid_format(message: Message, state: FSMContext):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    # 4) –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
    @dp.message(UploadFSM.waiting_for_copies, F.text)
    async def receive_copies(message: Message, state: FSMContext):
        try:
            cnt = int(message.text.strip())
            assert 1 <= cnt <= 50
        except:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–ø–∏–π –æ—Ç 1 –¥–æ 50.")
            return

        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append({
            "filename": data["current_filename"],
            "path": data["current_file_path"],
            "format": data["current_format"],
            "copies": cnt,
        })
        await state.update_data(photos=photos)

        kb_next = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")],
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            ],
            resize_keyboard=True
        )
        await message.answer("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb_next)
        await state.set_state(UploadFSM.waiting_for_photo)

    # 4.1) –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –ø—Ä–∏—à—ë–ª –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤ waiting_for_copies
    @dp.message(UploadFSM.waiting_for_copies)
    async def ask_valid_copies(message: Message, state: FSMContext):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–ø–∏–π (–æ—Ç 1 –¥–æ 50).")

    # 5) ‚Äú‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ‚Äù
    @dp.message(UploadFSM.waiting_for_photo, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")
    async def add_more(message: Message, state: FSMContext):
        await message.answer(
            "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ <b>—Ñ–∞–π–ª–æ–º</b> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(UploadFSM.waiting_for_photo)

    # 6) ‚Äú‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚Äù ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    @dp.message(UploadFSM.waiting_for_photo, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    async def finish_upload(message: Message, state: FSMContext):
        kb_cmt = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìù –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")]],
            resize_keyboard=True
        )
        await message.answer(
            "‚úâ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb_cmt
        )
        await state.set_state(UploadFSM.waiting_for_comment)

    # 7) –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ä–µ—à–∞–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ –∑–∞–∫–∞–∑
    @dp.message(UploadFSM.waiting_for_comment, F.text)
    async def receive_comment_and_finalize(message: Message, state: FSMContext):
        data = await state.get_data()
        comment = message.text.strip() if message.text.lower() != "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" else ""
        photos = data.get("photos", [])
        order_id = data.get("order_id")

        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            db.close()
            await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            await state.clear()
            return

        # 1) –°—á–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—É–º–º—É (raw_total), —É—á–∏—Ç—ã–≤–∞–µ–º threshold-—Å–∫–∏–¥–∫—É (–ø–æ DISCOUNT_THRESHOLDS)
        raw, after_threshold, thresh_disc = calculate_order_price(photos)

        # 2) –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (first_order_paid == False) ‚Äî —Å—Ä–∞–∑—É –¥–∞—ë–º 30%:
        if not user.first_order_paid:
            first_discount_amount = round(after_threshold * 0.30, 2)
            final_price = round(after_threshold - first_discount_amount, 2)
            total_discount = round(thresh_disc + first_discount_amount, 2)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –∏ —Å—Ä–∞–∑—É —Ñ–ª–∞–≥–∏—Ä—É–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω
            status_code = get_status_code(db, "–ù–æ–≤—ã–π")
            new_order = Order(
                order_id=order_id,
                user_id=user.id,
                photos=photos,
                comment=comment,
                price=final_price,
                discount=total_discount,
                status=status_code,
                paid=False,
                receiver_name=user.full_name,
                receiver_phone=user.phone_number,
                created_at=datetime.utcnow(),
            )
            db.add(new_order)

            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —É–∂–µ ‚Äú–∑–∞–Ω—è—Ç‚Äù
            user.first_order_paid = True
            db.commit()
            db.close()

            # –ì–æ–≤–æ—Ä–∏–º –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ü–í–ó:
            kb_pickup = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(
                        text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)",
                        request_location=True
                    )],
                    [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")],
                ],
                resize_keyboard=True
            )
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
                f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{final_price:.2f} ‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞: {total_discount:.2f} ‚ÇΩ)\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:",
                parse_mode="HTML",
                reply_markup=kb_pickup
            )
            await state.set_state(UploadFSM.choosing_pickup_point)
            return

        # 3) –ï—Å–ª–∏ –ù–ï –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
        db.close()
        await state.update_data(
            raw_price=after_threshold,
            threshold_discount=thresh_disc,
            comment=comment,
            photos=photos  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å
        )

        kb_skip = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–¥–∞:",
            reply_markup=kb_skip
        )
        await state.set_state(UploadFSM.waiting_for_promocode)

    # 8) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—É–∂–µ –ù–ï –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑)
    @dp.message(UploadFSM.waiting_for_promocode, F.text)
    async def apply_promocode(message: Message, state: FSMContext):
        data = await state.get_data()
        raw_after_threshold = data.get("raw_price", 0.0)
        threshold_discount = data.get("threshold_discount", 0.0)
        comment = data.get("comment", "")
        order_id = data.get("order_id")
        photos = data.get("photos", [])

        promo_code_text = message.text.strip().lower()
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        status_code = get_status_code(db, "–ù–æ–≤—ã–π")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ –≤–≤—ë–ª ¬´–±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞¬ª
        if promo_code_text in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", "–Ω–µ—Ç", "skip"):
            final_price = raw_after_threshold
            total_discount = threshold_discount

        else:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:
            from bot.services.promo import validate_and_apply_promocode
            try:
                promo_total, promo_disc = validate_and_apply_promocode(promo_code_text, raw_after_threshold)
                final_price = promo_total
                total_discount = round(threshold_discount + promo_disc, 2)
            except PromoError as e:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π/–∏—Å—Ç—ë–∫—à–∏–π/–∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                await message.answer(
                    f"‚ùó –û—à–∏–±–∫–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: {str(e)}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
                    parse_mode="HTML"
                )
                db.close()
                return

            # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo_code_text}</b> –ø—Ä–∏–º–µ–Ω—ë–Ω. "
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {promo_disc:.2f} ‚ÇΩ.",
                parse_mode="HTML"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ (—Å–æ –≤—Å–µ–º–∏ —Å–∫–∏–¥–∫–∞–º–∏):
        new_order = Order(
            order_id=order_id,
            user_id=user.id,
            photos=photos,
            comment=comment,
            price=final_price,
            discount=total_discount,
            status=status_code,
            paid=False,
            receiver_name=user.full_name,
            receiver_phone=user.phone_number,
            created_at=datetime.utcnow(),
        )
        db.add(new_order)
        db.commit()
        db.close()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ü–í–ó:
        kb_pickup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(
                    text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)",
                    request_location=True
                )],
                [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")],
            ],
            resize_keyboard=True
        )
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{final_price:.2f} ‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞: {total_discount:.2f} ‚ÇΩ)\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:",
            parse_mode="HTML",
            reply_markup=kb_pickup
        )
        await state.set_state(UploadFSM.choosing_pickup_point)

    # 9) –í—ã–±–æ—Ä –ü–í–ó –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    @dp.message(UploadFSM.choosing_pickup_point, F.content_type == "location")
    async def pickup_by_location(message: Message, state: FSMContext):
        pts = get_nearest_pickup_points(
            message.location.latitude, message.location.longitude
        )
        kb = InlineKeyboardMarkup(row_width=1, inline_keyboard=[])
        for idx, p in enumerate(pts, 1):
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{idx}. {p.name} ‚Äî {p.address}",
                    callback_data=f"select_pp:{p.id}"
                )
            ])
        await message.answer("–ù–∞–π–¥–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ –ü–í–ó, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)

    # 10) –í—ã–±–æ—Ä –ü–í–ó –∏–∑ —Å–ø–∏—Å–∫–∞
    @dp.message(UploadFSM.choosing_pickup_point, F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
    async def pickup_list(message: Message, state: FSMContext):
        pts = get_nearest_pickup_points(55.751244, 37.618423)
        kb = InlineKeyboardMarkup(row_width=1, inline_keyboard=[])
        for idx, p in enumerate(pts, 1):
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{idx}. {p.name} ‚Äî {p.address}",
                    callback_data=f"select_pp:{p.id}"
                )
            ])
        await message.answer("–°–ø–∏—Å–æ–∫ –ü–í–ó:", reply_markup=kb)

    # 11) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ü–í–ó –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    @dp.callback_query(UploadFSM.choosing_pickup_point, F.data.startswith("select_pp:"))
    async def select_pickup(callback: CallbackQuery, state: FSMContext):
        pp_id = int(callback.data.split(":", 1)[1])
        data = await state.get_data()
        order_id = data.get("order_id")

        db = SessionLocal()
        pp = db.query(PickupPoint).filter_by(id=pp_id).first()
        pp_name, pp_address = pp.name, pp.address

        order = db.query(Order).filter_by(order_id=order_id).first()
        if order:
            order.delivery_point = pp_name
            db.commit()

            photo_lines = [
                f"‚Ä¢ {p['filename']} ‚Äî {p['format']}, {p['copies']} –∫–æ–ø."
                for p in order.photos
            ]
            price_str    = f"{float(order.price):.2f}".rstrip("0").rstrip(".")
            discount_str = f"{float(order.discount):.2f}".rstrip("0").rstrip(".")
            comment_disp = order.comment or "‚Äî"
            delivery_disp= pp_name

            final_text = (
                "üì¶ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                + "\n".join(photo_lines) + "\n\n"
                + f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_disp}\n"
                + f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price_str} ‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞: {discount_str} ‚ÇΩ)\n"
                + f"üìç –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: <b>{delivery_disp}</b>\n"
                + f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.receiver_name or '‚Äî'}\n"
                + f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.receiver_phone or '‚Äî'}\n\n"
                + "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
            )
            await callback.message.answer(final_text, parse_mode="HTML", reply_markup=main_menu_keyboard())
        else:
            await callback.message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏.")
        db.close()
        await state.clear()

    # 12) –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (–≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è)
    @dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    async def cancel_order(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        order = (
            db.query(Order)
              .filter_by(user_id=user.id)
              .order_by(desc(Order.created_at))
              .first()
        )
        if order:
            folder = f"uploads/{user.telegram_id}/{order.order_id}"
            if os.path.exists(folder):
                shutil.rmtree(folder)
            db.delete(order)
            db.commit()
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
        else:
            await message.answer("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        db.close()
