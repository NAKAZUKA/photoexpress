import uuid
import shutil
import os
from aiogram import Dispatcher, F
from aiogram.types import (
    Message,
    Document,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import desc
from db.database import SessionLocal, Order, User, OrderStatus, PickupPoint
from bot.services.storage import save_photo_to_order_folder
from bot.services.pricing import calculate_order_price
from bot.services.maps import get_nearest_pickup_points
from bot.keyboards.common import main_menu_keyboard
from datetime import datetime

# Supported print formats
FORMATS = ["10x15", "13x18", "15x21", "21x30 (A4)", "30x40", "30x45"]

class UploadFSM(StatesGroup):
    waiting_for_photo = State()
    waiting_for_format = State()
    waiting_for_copies = State()
    waiting_for_comment = State()
    choosing_pickup_point = State()


def get_status_code(db, label_substring: str) -> str:
    status = (
        db.query(OrderStatus)
        .filter(OrderStatus.label.contains(label_substring))
        .first()
    )
    return status.code if status else "new"


def register_upload_handlers(dp: Dispatcher):
    # 1) –°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    @dp.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
    async def start_upload(message: Message, state: FSMContext):
        order_id = str(uuid.uuid4())
        await state.update_data(order_id=order_id, photos=[])
        await message.answer(
            "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ <b>—Ñ–∞–π–ª–æ–º</b> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.set_state(UploadFSM.waiting_for_photo)

    # 2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    @dp.message(UploadFSM.waiting_for_photo, F.document)
    async def receive_photo(message: Message, state: FSMContext):
        doc: Document = message.document
        if not doc.mime_type.startswith("image/"):
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º.")
            return

        data = await state.get_data()
        file = await message.bot.download(doc)
        filepath = save_photo_to_order_folder(
            message.from_user.id,
            data["order_id"],
            doc.file_name,
            file.read(),
        )
        await state.update_data(
            current_file_path=filepath, current_filename=doc.file_name
        )

        kb_fmt = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f)] for f in FORMATS],
            resize_keyboard=True,
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏:", reply_markup=kb_fmt)
        await state.set_state(UploadFSM.waiting_for_format)

    # 3) –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
    @dp.message(UploadFSM.waiting_for_format, F.text.in_(FORMATS))
    async def receive_format(message: Message, state: FSMContext):
        await state.update_data(current_format=message.text)
        await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–ø–∏–π –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(UploadFSM.waiting_for_copies)

    # 4) –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
    @dp.message(UploadFSM.waiting_for_copies, F.text)
    async def receive_copies(message: Message, state: FSMContext):
        try:
            cnt = int(message.text.strip())
            assert 1 <= cnt <= 50
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–ø–∏–π –æ—Ç 1 –¥–æ 50.")
            return

        data = await state.get_data()
        photos = data["photos"]
        photos.append({
            "filename": data["current_filename"],
            "path": data["current_file_path"],
            "format": data["current_format"],
            "copies": cnt,
        })
        await state.update_data(photos=photos)

        kb_next = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")],
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            ],
            resize_keyboard=True,
        )
        await message.answer("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb_next)
        await state.set_state(UploadFSM.waiting_for_photo)

    # 5) –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ
    @dp.message(UploadFSM.waiting_for_photo, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")
    async def add_more(message: Message, state: FSMContext):
        await message.answer("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Ñ–∞–π–ª–æ–º.")
        await state.set_state(UploadFSM.waiting_for_photo)

    # 6) –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    @dp.message(UploadFSM.waiting_for_photo, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    async def finish_upload(message: Message, state: FSMContext):
        kb_cmt = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìù –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")]],
            resize_keyboard=True,
        )
        await message.answer(
            "‚úâ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb_cmt,
        )
        await state.set_state(UploadFSM.waiting_for_comment)

    # 7) –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–±–µ–∑ —Å–±—Ä–æ—Å–∞ state)
    @dp.message(UploadFSM.waiting_for_comment, F.text)
    async def receive_comment_and_finalize(message: Message, state: FSMContext):
        data = await state.get_data()
        comment = message.text.strip() if message.text.lower() != "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" else ""
        photos = data["photos"]
        order_id = data["order_id"]

        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        status_code = get_status_code(db, "–ù–æ–≤—ã–π")
        _, price, discount = calculate_order_price(photos)

        new_order = Order(
            order_id=order_id,
            user_id=user.id,
            photos=photos,
            comment=comment,
            price=price,
            discount=discount,
            status=status_code,
            paid=False,
            receiver_name=user.full_name,
            receiver_phone=user.phone_number,
            created_at=datetime.utcnow(),
        )
        db.add(new_order)
        db.commit()
        db.close()

        photo_lines = [
            f"‚Ä¢ {p['filename']} ‚Äî {p['format']}, {p['copies']} –∫–æ–ø." for p in photos
        ]
        text = (
            "üì¶ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            + "\n".join(photo_lines)
            + f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}\n"
            + f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price:.2f} ‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞: {discount:.2f} ‚ÇΩ)\n"
            + "üìç –°—Ç–∞—Ç—É—Å: <b>–Ω–æ–≤—ã–π</b>\n\n"
            + "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:"
        )
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é(–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", request_location=True)],
                [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")],
            ],
            resize_keyboard=True,
        )
        await message.answer(text, parse_mode="HTML", reply_markup=kb)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –ü–í–ó
        await state.set_state(UploadFSM.choosing_pickup_point)

    # 8) –í—ã–±–æ—Ä –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    @dp.message(UploadFSM.choosing_pickup_point, F.content_type == "location")
    async def pickup_by_location(message: Message, state: FSMContext):
        pts = get_nearest_pickup_points(
            message.location.latitude, message.location.longitude
        )
        kb = InlineKeyboardMarkup(row_width=1, inline_keyboard=[])
        for i, p in enumerate(pts, 1):
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{i}. {p.name} ‚Äî {p.address}",
                    callback_data=f"select_pp:{p.id}" )
            ])
        await message.answer("–ù–∞–π–¥–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ –ü–í–ó, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)

    # 9) –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    @dp.message(UploadFSM.choosing_pickup_point, F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
    async def pickup_list(message: Message, state: FSMContext):
        pts = get_nearest_pickup_points(55.751244, 37.618423)
        kb = InlineKeyboardMarkup(row_width=1, inline_keyboard=[])
        for i, p in enumerate(pts, 1):
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{i}. {p.name} ‚Äî {p.address}",
                    callback_data=f"select_pp:{p.id}" )
            ])
        await message.answer("–°–ø–∏—Å–æ–∫ –ü–í–ó:", reply_markup=kb)

    # 10) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ü–í–ó –∏ —Å–±—Ä–æ—Å state
    @dp.callback_query(UploadFSM.choosing_pickup_point, F.data.startswith("select_pp:"))
    async def select_pickup(callback: CallbackQuery, state: FSMContext):
        pp_id = int(callback.data.split(":", 1)[1])
        data = await state.get_data()
        order_id = data.get("order_id")

        db = SessionLocal()
        pp = db.query(PickupPoint).filter_by(id=pp_id).first()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        pp_name, pp_address = pp.name, pp.address
        order = db.query(Order).filter_by(order_id=order_id).first()
        if order:
            order.delivery_point = pp_name
            db.commit()
        db.close()

        await callback.message.answer(
            f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–í–ó: {pp_name}\n{pp_address}",
            reply_markup=main_menu_keyboard(),
        )

        await state.clear()

    # 11) –û–ø–ª–∞—Ç–∞
    @dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
    async def mark_paid(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        order = (
            db.query(Order)
            .filter_by(user_id=user.id)
            .order_by(desc(Order.created_at))
            .first()
        )
        status_in_process = get_status_code(db, "–û–±—Ä–∞–±–æ—Ç–∫–µ")
        if order:
            order.paid = True
            order.status = status_in_process
            db.commit()
            label = db.query(OrderStatus).filter_by(code=status_in_process).first().label
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω! –°—Ç–∞—Ç—É—Å: <b>{label}</b>",
                reply_markup=main_menu_keyboard(),
                parse_mode="HTML",
            )
        else:
            await message.answer("‚ùó –ù–µ—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        db.close()

    # 12) –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    @dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    async def cancel_order(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        order = (
            db.query(Order)
            .filter_by(user_id=user.id)
            .order_by(desc(Order.created_at))
            .first()
        )
        if order:
            folder = f"uploads/{user.telegram_id}/{order.order_id}"
            if os.path.exists(folder):
                shutil.rmtree(folder)
            db.delete(order)
            db.commit()
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
        else:
            await message.answer("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        db.close()
