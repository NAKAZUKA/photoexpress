from aiogram import Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db.database import SessionLocal, User
from sqlalchemy.exc import IntegrityError
import re
from bot.keyboards.common import main_menu_keyboard

class Onboarding(StatesGroup):
    waiting_for_phone = State()
    waiting_for_fullname = State()

def register_user_handlers(dp: Dispatcher):

    @dp.message(F.text == "/start")
    async def start(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        db.close()

        if user and user.full_name and user.phone_number:
            await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
            return

        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>PhotoExpress</b>!\n\n"
            "üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:\n"
            "‚Äî –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ <b>–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>.\n"
            "‚Äî –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç—å <b>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–∫–∞–∑–æ–≤</b>.\n"
            "‚Äî –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>—Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> –æ—Ç —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")]],
                resize_keyboard=True,
                is_persistent=True
            ),
            parse_mode="HTML"
        )

    @dp.message(F.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")
    async def agree_policy(message: Message, state: FSMContext):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                accepted_policy=True
            )
            db.add(user)
            try:
                db.commit()
            except IntegrityError:
                db.rollback()
        db.close()

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                [KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")]
            ],
            resize_keyboard=True,
            is_persistent=True
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=keyboard)
        await state.set_state(Onboarding.waiting_for_phone)

    @dp.message(Onboarding.waiting_for_phone, F.contact)
    async def phone_from_button(message: Message, state: FSMContext):
        phone = message.contact.phone_number
        await save_phone_and_ask_name(message, state, phone)

    @dp.message(Onboarding.waiting_for_phone, F.text)
    async def phone_manual_input(message: Message, state: FSMContext):
        text = message.text.strip()
        if text.lower().startswith("‚úçÔ∏è"):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é (–ø—Ä–∏–º–µ—Ä: +79991234567):")
        elif text.startswith("+7") or text.startswith("8"):
            await save_phone_and_ask_name(message, state, text)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å +7")

    async def save_phone_and_ask_name(message: Message, state: FSMContext, phone: str):
        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        existing_phone_user = db.query(User).filter_by(phone_number=phone).first()

        if existing_phone_user and existing_phone_user.telegram_id != message.from_user.id:
            await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
            db.close()
            return

        if user:
            user.phone_number = phone
            db.commit()
        db.close()

        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b> (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Onboarding.waiting_for_fullname)

    @dp.message(Onboarding.waiting_for_fullname)
    async def fullname_received(message: Message, state: FSMContext):
        full_name = message.text.strip()

        if not re.match(r"^[–ê-–Ø–∞-—èA-Za-z]{2,}\s[–ê-–Ø–∞-—èA-Za-z]{2,}.*$", full_name):
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û ‚Äî –º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è.")
            return

        db = SessionLocal()
        user = db.query(User).filter_by(telegram_id=message.from_user.id).first()
        if user:
            user.full_name = full_name
            db.commit()
        db.close()

        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        await state.clear()
