import asyncio
from datetime import datetime, timedelta

from aiogram import Bot
from sqlalchemy import select

# –º–æ–¥–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ ‚Äî –º—ã –ª–∏—à—å –º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
from db.database import Order, OrderStatus, User
from db.async_database import AsyncSessionLocal


async def order_status_updater(bot: Bot) -> None:
    """
    –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥:
    ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new', —Å–æ–∑–¥–∞–Ω–Ω—ã–µ ‚â• 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ 'in_progress'
    ‚Ä¢ –®–ª—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è event-loop.
    """
    while True:
        await asyncio.sleep(60)

        now = datetime.utcnow()
        threshold = now - timedelta(minutes=5)

        async with AsyncSessionLocal() as session:
            # 1) –≤—ã–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
            result = await session.execute(
                select(Order).where(
                    Order.status == "new",
                    Order.paid.is_(True),
                    Order.created_at <= threshold
                )
            )
            orders_to_process = result.scalars().all()

            if not orders_to_process:
                continue  # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞

            # 2) –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—É—Å–∞ "in_progress" –æ–¥–∏–Ω —Ä–∞–∑
            in_prog: OrderStatus | None = await session.scalar(
                select(OrderStatus).where(OrderStatus.code == "in_progress")
            )
            if in_prog is None:  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –≤ –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                in_prog_code, in_prog_label = "in_progress", "üõ† –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            else:
                in_prog_code, in_prog_label = in_prog.code, in_prog.label

            # 3) –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –∏ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            for order in orders_to_process:
                order.status = in_prog_code

                # –±–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ–º ¬´–ø—Ä–∏–∂–∞—Ç—å¬ª selectinload, –Ω–æ –∑–¥–µ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ scalar)
                user = await session.scalar(
                    select(User).where(User.id == order.user_id)
                )
                if user:
                    try:
                        await bot.send_message(
                            user.telegram_id,
                            f"üõ† –ó–∞–∫–∞–∑ #{order.order_id[:8]} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å ¬´{in_prog_label}¬ª."
                        )
                    except Exception:
                        # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ Telegram API –¥–∞–ª –æ—à–∏–±–∫—É
                        pass

            # 4) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
