import asyncio
from datetime import datetime, timedelta

from aiogram import Bot
from db.database import SessionLocal, Order, OrderStatus, User

async def order_status_updater(bot: Bot):
    """
    –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç –≤ 'in_progress'
    –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    while True:
        await asyncio.sleep(60)
        now = datetime.utcnow()
        threshold = now - timedelta(minutes=5)

        db = SessionLocal()
        # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, —Å—Ç–∞—Ä—à–µ threshold
        ready = (
            db.query(Order)
            .filter(Order.status == "new", Order.paid == True, Order.created_at <= threshold)
            .all()
        )
        in_prog = db.query(OrderStatus).filter_by(code="in_progress").first()

        for order in ready:
            order.status = in_prog.code
            db.commit()

            user = db.query(User).filter_by(id=order.user_id).first()
            try:
                await bot.send_message(
                    user.telegram_id,
                    f"üõ† –ó–∞–∫–∞–∑ #{order.order_id[:8]} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å ¬´{in_prog.label}¬ª."
                )
            except Exception:
                pass

        db.close()
